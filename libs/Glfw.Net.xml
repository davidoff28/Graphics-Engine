<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Glfw.Net</name>
    </assembly>
    <members>
        <member name="T:Glfw3.Glfw">
            <summary>
            <a href="http://www.glfw.org/">GLFW 3</a> bindings.
            </summary>
        </member>
        <member name="M:Glfw3.Glfw.ConfigureNativesDirectory(System.String)">
            <summary>
            Adds the specified native directory path to the Path environment variable to facilitate
            native loading.
            </summary>
            <param name="nativeDirectory">The directory that the native library is stored
            in.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">When <paramref name="nativeDirectory"/> is
            not found.</exception>
        </member>
        <member name="F:Glfw3.Glfw.DontCare">
            <summary>
            GLFW_DONT_CARE
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.VersionMajor">
            <summary>
            The major version number of the GLFW library. This is incremented when the API is
            changed in non-compatible ways.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.VersionMinor">
            <summary>
            The minor version number of the GLFW library. This is incremented when features are
            added to the API but it remains backward-compatible.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.VersionRevision">
            <summary>
            The revision number of the GLFW library. This is incremented when a bug fix release is
            made that does not contain any API changes.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.CharFunc">
            <summary>
            The function signature for Unicode character callbacks.
            </summary>
            <param name="window">The window that received the event.</param>
            <param name="codepoint">The Unicode code point of the character.</param>
            <seealso cref="M:Glfw3.Glfw.SetCharCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CharFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.CharModsFunc">
            <summary>
            The function signature for Unicode character with modifiers callbacks. It is called for
            each input character, regardless of what modifier keys are held down.
            </summary>
            <param name="window">The window that received the event.</param>
            <param name="codepoint">The Unicode code point of the character.</param>
            <param name="mods">Bit field describing which <see cref="T:Glfw3.Glfw.KeyMods"/> were held
            down.</param>
            <seealso cref="M:Glfw3.Glfw.SetCharModsCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CharModsFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.CursorEnterFunc">
            <summary>
            The function signature for cursor enter/leave callbacks.
            </summary>
            <param name="window">The window that received the event.</param>
            <param name="entered"><c>true</c> if the cursor entered the window's client area, or
            <c>false</c> if it left it.</param>
            <seealso cref="M:Glfw3.Glfw.SetCursorEnterCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CursorEnterFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.CursorPosFunc">
            <summary>
            The function signature for cursor position callbacks.
            </summary>
            <param name="window">The window that received the event.</param>
            <param name="xpos">The new cursor x-coordinate, relative to the left edge of the client
            area.</param>
            <param name="ypos">The new cursor y-coordinate, relative to the top edge of the client
            area.</param>
            <seealso cref="M:Glfw3.Glfw.SetCursorPosCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CursorPosFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.DropFunc">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="count"></param>
            <param name="paths"></param>
            <seealso cref="M:Glfw3.Glfw.SetDropCallback(Glfw3.Glfw.Window,Glfw3.Glfw.DropFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.ErrorFunc">
            <summary>
            The function signature for error callbacks.
            </summary>
            <param name="error">An <see cref="T:Glfw3.Glfw.ErrorCode"/>.</param>
            <param name="description">A UTF-8 encoded string describing the error.</param>
            <seealso cref="M:Glfw3.Glfw.SetErrorCallback(Glfw3.Glfw.ErrorFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.FramebufferSizeFunc">
            <summary>
            The function signature for framebuffer resize callbacks.
            </summary>
            <param name="window">The window whose framebuffer was resized.</param>
            <param name="width">The new width, in pixels, of the framebuffer.</param>
            <param name="height">The new height, in pixels, of the framebuffer.</param>
            <seealso cref="M:Glfw3.Glfw.SetFramebufferSizeCallback(Glfw3.Glfw.Window,Glfw3.Glfw.FramebufferSizeFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.KeyFunc">
            <summary>
            The function signature for keyboard key callbacks.
            </summary>
            <param name="window">The window that received the event.</param>
            <param name="key">The <see cref="T:Glfw3.Glfw.KeyCode"/> that was pressed or released.</param>
            <param name="scancode">The system-specific scancode of the key.</param>
            <param name="state">One of <see cref="T:Glfw3.Glfw.InputState"/>.</param>
            <param name="mods">Bit field describing which <see cref="T:Glfw3.Glfw.KeyMods"/> were held
            down.</param>
            <seealso cref="M:Glfw3.Glfw.SetKeyCallback(Glfw3.Glfw.Window,Glfw3.Glfw.KeyFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.JoystickFunc">
            <summary>
            The function signature for joystick configuration callbacks.
            </summary>
            <param name="joy">The joystick that was connected or disconnected.</param>
            <param name="evt">One of <see cref="T:Glfw3.Glfw.ConnectionEvent"/>.</param>
            <seealso cref="M:Glfw3.Glfw.SetJoystickCallback(Glfw3.Glfw.JoystickFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.MonitorFunc">
            <summary>
            The function signature for monitor configuration callbacks.
            </summary>
            <param name="monitor">The monitor that was connected or disconnected.</param>
            <param name="evt">One of <see cref="T:Glfw3.Glfw.ConnectionEvent"/>.</param>
            <seealso cref="M:Glfw3.Glfw.SetMonitorCallback(Glfw3.Glfw.MonitorFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.MouseButtonFunc">
            <summary>
            The function signature for mouse button callbacks.
            </summary>
            <param name="window">The window that received the event.</param>
            <param name="button">The <see cref="T:Glfw3.Glfw.MouseButton"/> that was pressed or released.</param>
            <param name="state">One of <see cref="F:Glfw3.Glfw.InputState.Press"/> or
            <see cref="F:Glfw3.Glfw.InputState.Release"/></param>
            <param name="mods">Bit field describing which <see cref="T:Glfw3.Glfw.KeyMods"/> were held
            down.</param>
            <seealso cref="M:Glfw3.Glfw.SetMouseButtonCallback(Glfw3.Glfw.Window,Glfw3.Glfw.MouseButtonFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.ScrollFunc">
            <summary>
            The function signature for scroll callbacks.
            </summary>
            <param name="window">The window that received the event.</param>
            <param name="xoffset">The scroll offset along the x-axis.</param>
            <param name="yoffset">The scroll offset along the y-axis.</param>
            <seealso cref="M:Glfw3.Glfw.SetScrollCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CursorPosFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.WindowCloseFunc">
            <summary>
            The function signature for window close callbacks.
            </summary>
            <param name="window">The window that the user attempted to close.</param>
            <seealso cref="M:Glfw3.Glfw.SetWindowCloseCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowCloseFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.WindowFocusFunc">
            <summary>
            The function signature for window focus/defocus callbacks.
            </summary>
            <param name="window">The window that gained or lost input focus.</param>
            <param name="focused"><c>true</c> if the window was given input focus, or <c>false</c>
            if it lost it.</param>
            <seealso cref="M:Glfw3.Glfw.SetWindowFocusCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowFocusFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.WindowIconifyFunc">
            <summary>
            The function signature for window iconify/restore callbacks.
            </summary>
            <param name="window">The window that was iconified or restored.</param>
            <param name="focused"><c>true</c> if the window was iconified, or <c>false</c> if it was
            restored.</param>
            <seealso cref="M:Glfw3.Glfw.SetWindowIconifyCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowIconifyFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.WindowPosFunc">
            <summary>
            The function signature for window position callbacks.
            </summary>
            <param name="window">The window that was moved.</param>
            <param name="xpos">The new x-coordinate, in screen coordinates, of the upper-left corner
            of the client area of the window.</param>
            <param name="ypos">The new y-coordinate, in screen coordinates, of the upper-left corner
            of the client area of the window.</param>
            <seealso cref="M:Glfw3.Glfw.SetWindowPosCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowPosFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.WindowRefreshFunc">
            <summary>
            The function signature for window content refresh callbacks.
            </summary>
            <param name="window">The window whose content needs to be refreshed.</param>
            <seealso cref="M:Glfw3.Glfw.SetWindowRefreshCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowRefreshFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.WindowSizeFunc">
            <summary>
            The function signature for window resize callbacks.
            </summary>
            <param name="window">The window that was resized.</param>
            <param name="width">The new width, in screen coordinates, of the window.</param>
            <param name="height">The new height, in screen coordinates, of the window.</param>
            <seealso cref="M:Glfw3.Glfw.SetWindowSizeCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowSizeFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.ClientApi">
            <seealso cref="F:Glfw3.Glfw.Hint.ClientApi"/>
        </member>
        <member name="T:Glfw3.Glfw.ConnectionEvent">
            <summary>
            Connection events for inputs and monitors.
            </summary>
            <seealso cref="M:Glfw3.Glfw.SetJoystickCallback(Glfw3.Glfw.JoystickFunc)"/>
            <seealso cref="M:Glfw3.Glfw.SetMonitorCallback(Glfw3.Glfw.MonitorFunc)"/>
        </member>
        <member name="T:Glfw3.Glfw.ContextApi">
            <seealso cref="F:Glfw3.Glfw.Hint.ContextCreationApi"/>
        </member>
        <member name="T:Glfw3.Glfw.ContextReleaseBehavior">
            <seealso cref="F:Glfw3.Glfw.Hint.ContextReleaseBehavior"/>
        </member>
        <member name="T:Glfw3.Glfw.ContextRobustness">
            <seealso cref="F:Glfw3.Glfw.Hint.ContextRobustness"/>
        </member>
        <member name="T:Glfw3.Glfw.CursorMode">
            <summary>
            Cursor modes.
            </summary>
            <seealso cref="M:Glfw3.Glfw.SetInputMode(Glfw3.Glfw.Window,Glfw3.Glfw.InputMode,Glfw3.Glfw.CursorMode)"/>
        </member>
        <member name="F:Glfw3.Glfw.CursorMode.Normal">
            <summary>
            Makes the cursor visible and behaving normally.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.CursorMode.Hidden">
            <summary>
            Makes the cursor invisible when it is over the client area of the window but does
            not restrict the cursor from leaving.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.CursorMode.Disabled">
            <summary>
            Hides and grabs the cursor, providing virtual and unlimited cursor movement. This is
            useful for implementing for example 3D camera controls.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.CursorType">
            <summary>
            Standard cursor shapes.
            </summary>
            <seealso cref="M:Glfw3.Glfw.SetCursor(Glfw3.Glfw.Window,Glfw3.Glfw.Cursor)"/>
        </member>
        <member name="F:Glfw3.Glfw.CursorType.Arrow">
            <summary>
            The regular arrow cursor.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.CursorType.Beam">
            <summary>
            The text input I-beam cursor shape.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.CursorType.Crosshair">
            <summary>
            The crosshair shape.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.CursorType.Hand">
            <summary>
            The hand shape.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.CursorType.ResizeX">
            <summary>
            The horizontal resize arrow shape.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.CursorType.ResizeY">
            <summary>
            The vertical resize arrow shape.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.ErrorCode">
            <summary>
            Error codes.
            </summary>
            <seealso cref="M:Glfw3.Glfw.SetErrorCallback(Glfw3.Glfw.ErrorFunc)"/>
        </member>
        <member name="F:Glfw3.Glfw.ErrorCode.NotInitialized">
            <summary>
            <para>GLFW has not been initialized.</para>
            <para>This occurs if a GLFW function was called that must not be called unless the
            library is initialized.</para>
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.ErrorCode.NoCurrentContext">
            <summary>
            <para>No context is current for this thread.</para>
            <para>This occurs if a GLFW function was called that needs and operates on the
            current OpenGL or OpenGL ES context but no context is current on the calling thread.
            One such function is <see cref="M:Glfw3.Glfw.SwapInterval(System.Int32)"/>.</para>
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.ErrorCode.InvalidEnum">
            <summary>
            One of the arguments to the function was an invalid enum value, for example
            requesting <see cref="F:Glfw3.Glfw.Hint.RedBits"/> with
            <see cref="M:Glfw3.Glfw.GetWindowAttrib(Glfw3.Glfw.Window,Glfw3.Glfw.WindowAttrib)"/>.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.ErrorCode.InvalidValue">
            <summary>
            One of the arguments to the function was an invalid value, for example requesting a
            non-existent OpenGL or OpenGL ES version like <c>2.7</c>. Requesting a valid but
            unavailable OpenGL or OpenGL ES version will instead result in a
            <see cref="F:Glfw3.Glfw.ErrorCode.VersionUnavailable"/> error.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.ErrorCode.OutOfMemory">
            <summary>
            A memory allocation failed.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.ErrorCode.ApiUnavailable">
            <summary>
            GLFW could not find support for the requested API on the system.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.ErrorCode.VersionUnavailable">
            <summary>
            The requested OpenGL or OpenGL ES version (including any requested context or
            framebuffer hints) is not available on this machine.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.ErrorCode.PlatformError">
            <summary>
            A platform-specific error occurred that does not match any of the more specific
            categories.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.ErrorCode.FormatUnavailable">
            <summary>
            <para>The requested format is not supported or available.</para>
            <para>If emitted during window creation, the requested pixel format is not
            supported.</para>
            <para>If emitted when querying the clipboard, the contents of the clipboard could
            not be converted to the requested format.</para>
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.ErrorCode.NoWindowContext">
            <summary>
            A window that does not have an OpenGL or OpenGL ES context was passed to a function
            that requires it to have one.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.Hint">
            <summary>
            <para>These hints are set to their default values each time the library is initialized
            with <see cref="M:Glfw3.Glfw.Init"/>, can be set individually with
            <see cref="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Boolean)"/> and reset all at once to their defaults with
            <see cref="M:Glfw3.Glfw.DefaultWindowHints"/>.</para>
            
            <para>Note that hints need to be set before the creation of the window and context you
            wish to have the specified attributes.</para>
            </summary>
            <seealso cref="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Boolean)"/>
        </member>
        <member name="F:Glfw3.Glfw.Hint.Focused">
            <summary>
            Specifies whether the windowed mode window will be given input focus when created.
            This hint is ignored for full screen and initially hidden windows.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.Resizable">
            <summary>
            Specifies whether the windowed mode window will be resizable by the user. The
            window will still be resizable using the
            <see cref="M:Glfw3.Glfw.SetWindowSize(Glfw3.Glfw.Window,System.Int32,System.Int32)"/> function. This hint is ignored for
            full screen windows.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.Visible">
            <summary>
            Specifies whether the windowed mode window will be initially visible. This hint is
            ignored for full screen windows.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.Decorated">
             <summary>
             Specifies whether the windowed mode window will have window decorations such as a 
            border, a close widget, etc. An undecorated window may still allow the user to
             generate close events on some platforms. This hint is ignored for full screen
             windows.
             </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.AutoIconify">
            <summary>
            Specifies whether the full screen window will automatically iconify and restore the
            previous video mode on input focus loss. This hint is ignored for windowed mode
            windows.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.Floating">
            <summary>
            Specifies whether the windowed mode window will be floating above other regular
            windows, also called topmost or always-on-top. This is intended primarily for
            debugging purposes and cannot be used to implement proper full screen windows. This
            hint is ignored for full screen windows.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.Maximized">
            <summary>
            Specifies whether the windowed mode window will be maximized when created. This hint
            is ignored for full screen windows.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.RedBits">
            <summary>
            Specifies the desired bit depths of the red components of the default framebuffer.
            <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.GreenBits">
            <summary>
            Specifies the desired bit depths of the green components of the default framebuffer.
            <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.BlueBits">
            <summary>
            Specifies the desired bit depths of the blue components of the default framebuffer.
            <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.AlphaBits">
            <summary>
            Specifies the desired bit depths of the alpha components of the default framebuffer.
            <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.DepthBits">
            <summary>
            Specifies the desired bit depths of the depth components of the default framebuffer.
            <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.StencilBits">
            <summary>
            Specifies the desired bit depths of the stencil components of the default
            framebuffer. <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.AccumRedBits">
            <summary>
            Specifies the desired bit depths of the red components of the accumulation buffer.
            <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
            <remarks>Accumulation buffers are a legacy OpenGL feature and should not be used in
            new code.</remarks>
        </member>
        <member name="F:Glfw3.Glfw.Hint.AccumGreenBits">
            <summary>
            Specifies the desired bit depths of the green components of the accumulation buffer.
            <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
            <remarks>Accumulation buffers are a legacy OpenGL feature and should not be used in
            new code.</remarks>
        </member>
        <member name="F:Glfw3.Glfw.Hint.AccumBlueBits">
            <summary>
            Specifies the desired bit depths of the blue components of the accumulation buffer.
            <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
            <remarks>Accumulation buffers are a legacy OpenGL feature and should not be used in
            new code.</remarks>
        </member>
        <member name="F:Glfw3.Glfw.Hint.AccumAlphaBits">
            <summary>
            Specifies the desired bit depths of the alpha components of the accumulation buffer.
            <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
            <remarks>Accumulation buffers are a legacy OpenGL feature and should not be used in
            new code.</remarks>
        </member>
        <member name="F:Glfw3.Glfw.Hint.AuxBuffers">
            <summary>
            Specifies the desired number of auxiliary buffers. <see cref="F:Glfw3.Glfw.DontCare"/> means the
            application has no preference.
            </summary>
            <remarks>Auxiliary buffers are a legacy OpenGL feature and should not be used in new
            code.</remarks>
        </member>
        <member name="F:Glfw3.Glfw.Hint.Stereo">
            <summary>
            Specifies whether to use stereoscopic rendering. This is a hard constraint.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.Samples">
            <summary>
            Specifies the desired number of samples to use for multisampling. Zero disables
            multisampling. <see cref="F:Glfw3.Glfw.DontCare"/> means the application has no preference.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.sRGBCapable">
            <summary>
            Specifies whether the framebuffer should be sRGB capable. If supported, a created
            OpenGL context will support the <c>GL_FRAMEBUFFER_SRGB</c> enable, also called
            <c>GL_FRAMEBUFFER_SRGB_EXT</c>) for controlling sRGB rendering and a created OpenGL
            ES context will always have sRGB rendering enabled.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.Doublebuffer">
            <summary>
            Specifies whether the framebuffer should be double buffered. You nearly always want
            to use double buffering. This is a hard constraint.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.RefreshRate">
            <summary>
            Specifies the desired refresh rate for full screen windows. If set to
            <see cref="F:Glfw3.Glfw.DontCare"/>, the highest available refresh rate will be used. This hint
            is ignored for windowed mode windows.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.ClientApi">
            <summary>
            Specifies which <see cref="T:Glfw3.Glfw.ClientApi"/> to create the context for.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.ContextVersionMajor">
            <summary>
            Specifies the client API major version that the created context must be compatible
            with. The exact behavior of this hint depends on the requested client API.
            </summary>
            <remarks>
            <para><b>OpenGL:</b> Creation will fail if the OpenGL version of the created context
            is less than the one requested. It is therefore perfectly safe to use the default of
            version 1.0 for legacy code and you will still get backwards-compatible contexts of
            version 3.0 and above when available. While there is no way to ask the driver for a
            context of the highest supported version, GLFW will attempt to provide this when you
            ask for a version 1.0 context, which is the default for these hints.</para>
            
            <para><b>OpenGL ES:</b> Creation will fail if the OpenGL ES version of the created
            context is less than the one requested. Additionally, OpenGL ES 1.x cannot be
            returned if 2.0 or later was requested, and vice versa. This is because OpenGL ES
            3.x is backward compatible with 2.0, but OpenGL ES 2.0 is not backward compatible
            with 1.x.</para>
            </remarks>
            <seealso cref="F:Glfw3.Glfw.Hint.ContextVersionMinor"/>
        </member>
        <member name="F:Glfw3.Glfw.Hint.ContextVersionMinor">
            <summary>
            Specifies the client API minor version that the created context must be compatible
            with. The exact behavior of this hint depends on the requested client API.
            </summary>
            <seealso cref="F:Glfw3.Glfw.Hint.ContextVersionMajor"/>
        </member>
        <member name="F:Glfw3.Glfw.Hint.ContextRevision">
            <summary>
            Specifies the client API revision version that the created context must be
            compatible with. The exact behavior of this hint depends on the requested client
            API.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.ContextRobustness">
            <summary>
            Specifies the <see cref="T:Glfw3.Glfw.ContextRobustness"/> to be used by the context.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.OpenglForwardCompat">
            <summary>
            Specifies whether the OpenGL context should be forward-compatible, i.e. one where
            all functionality deprecated in the requested version of OpenGL is removed. This
            must only be used if the requested OpenGL version is 3.0 or above. If OpenGL ES is
            requested, this hint is ignored.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.OpenglDebugContext">
            <summary>
            Specifies whether to create a debug OpenGL context, which may have additional error
            and performance issue reporting functionality. If OpenGL ES is requested, this hint
            is ignored.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.OpenglProfile">
            <summary>
            Specifies which <see cref="T:Glfw3.Glfw.OpenGLProfile"/> to create the context for. If requesting
            an OpenGL version below 3.2, <see cref="F:Glfw3.Glfw.OpenGLProfile.Any"/> must be used. If OpenGL
            ES is requested, this hint is ignored.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.ContextReleaseBehavior">
            <summary>
            Specifies the <see cref="T:Glfw3.Glfw.ContextReleaseBehavior"/> to be used by the context.
            If the behavior is <see cref="F:Glfw3.Glfw.ContextReleaseBehavior.Any"/>, the default behavior of
            the context creation API will be used. If the behavior is
            <see cref="F:Glfw3.Glfw.ContextReleaseBehavior.Flush"/>, the pipeline will be flushed whenever
            the context is released from being the current one. If the behavior is
            <see cref="F:Glfw3.Glfw.ContextReleaseBehavior.None"/>, the pipeline will not be flushed on
            release.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.ContextNoError">
            <summary>
            Specifies whether errors should be generated by the context. If enabled, situations
            that would have generated errors instead cause undefined behavior.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Hint.ContextCreationApi">
            <summary>
            Specifies which <see cref="T:Glfw3.Glfw.ContextApi"/> to use to create the context. This is a
            hard constraint. If no client API is requested, this hint is ignored.
            </summary>
            <remarks>
            <para><b>OSX:</b> The EGL API is not available on this platform and requests to use
            it will fail.</para>
            
            <para><b>Wayland, Mir:</b> The EGL API is the native context creation API, so this
            hint will have no effect.</para>
            </remarks>
        </member>
        <member name="T:Glfw3.Glfw.InputMode">
            <summary>
            Input mode options.
            </summary>
            <seealso cref="M:Glfw3.Glfw.SetInputMode(Glfw3.Glfw.Window,Glfw3.Glfw.InputMode,Glfw3.Glfw.CursorMode)"/>
        </member>
        <member name="T:Glfw3.Glfw.InputState">
            <summary>
            Key and button actions.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.InputState.Release">
            <summary>
            The key or mouse button was released.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.InputState.Press">
            <summary>
            The key or mouse button was pressed.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.InputState.Repeat">
            <summary>
            The key was held down until it repeated.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.Joystick">
            <summary>
            Joysticks.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.KeyCode">
            <summary>
            <para>Keyboard keys.</para>
            
            <para>These key codes are inspired by the USB HID Usage Tables v1.12 (p. 53-60), but
            re-arranged to map to 7-bit ASCII for printable keys(function keys are put in the 256+
            range).</para>
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.KeyMods">
            <summary>
            Modifier key flags.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.KeyMods.Shift">
            <summary>
            If this bit is set one or more Shift keys were held down.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.KeyMods.Control">
            <summary>
            If this bit is set one or more Control keys were held down.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.KeyMods.Alt">
            <summary>
            If this bit is set one or more Alt keys were held down.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.KeyMods.Super">
            <summary>
            If this bit is set one or more Super keys were held down.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.MouseButton">
            <summary>
            Mouse buttons.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.OpenGLProfile">
            <seealso cref="F:Glfw3.Glfw.Hint.OpenglProfile"/>
        </member>
        <member name="F:Glfw3.Glfw.WindowAttrib.Focused">
            <summary>
            Indicates whether the specified window has input focus. Initial input focus is
            controlled by the window hint with the same name.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.WindowAttrib.Iconified">
            <summary>
            Indicates whether the specified window is iconified, whether by the user or with
            <see cref="M:Glfw3.Glfw.IconifyWindow(Glfw3.Glfw.Window)"/>.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.WindowAttrib.Maximized">
            <summary>
            Indicates whether the specified window is maximized, whether by the user or with
            <see cref="M:Glfw3.Glfw.MaximizeWindow(Glfw3.Glfw.Window)"/>.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.WindowAttrib.Visible">
            <summary>
            Indicates whether the specified window is visible. Window visibility can be
            controlled with <see cref="M:Glfw3.Glfw.ShowWindow(Glfw3.Glfw.Window)"/> and
            <see cref="M:Glfw3.Glfw.HideWindow(Glfw3.Glfw.Window)"/> and initial visibility is controlled by the
            <see cref="T:Glfw3.Glfw.Hint"/> with the same name.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.WindowAttrib.Resizable">
            <summary>
            Indicates whether the specified window is resizable by the user. This is set on
            creation with the <see cref="T:Glfw3.Glfw.Hint"/> with the same name.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.WindowAttrib.Decorated">
            <summary>
            Indicates whether the specified window has decorations such as a border, a close
            widget, etc. This is set on creation with the <see cref="T:Glfw3.Glfw.Hint"/> with the same name.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.WindowAttrib.Floating">
            <summary>
            Indicates whether the specified window is floating, also called topmost or
            always-on-top. This is controlled by the <see cref="T:Glfw3.Glfw.Hint"/> with the same name.
            </summary>
        </member>
        <member name="M:Glfw3.Glfw.Init">
            <summary>
            <para>This function initializes the GLFW library. Before most GLFW functions can be
            used, GLFW must be initialized, and before an application terminates GLFW should be
            terminated in order to free any resources allocated during or after
            initialization.</para>
            <para>If this function fails, it calls <see cref="M:Glfw3.Glfw.Terminate"/> before returning. If it
            succeeds, you should call <see cref="M:Glfw3.Glfw.Terminate"/> before the application exits.</para>
            <para>Additional calls to this function after successful initialization but before
            termination will return <c>true</c> immediately.</para>
            </summary>
            <returns><c>true</c> if successful, or <c>false</c> if an error occurred.</returns>
            <remarks>
            <strong>OSX:</strong> This function will change the current directory of the application
            to the <c>Contents/Resources</c> subdirectory of the application's bundle, if present.
            </remarks>
            <seealso cref="M:Glfw3.Glfw.Terminate"/>
        </member>
        <member name="M:Glfw3.Glfw.Terminate">
            <summary>
            <para>This function destroys all remaining windows and cursors, restores any modified
            gamma ramps and frees any other allocated resources. Once this function is called, you
            must again call <see cref="M:Glfw3.Glfw.Init"/> successfully before you will be able to use most GLFW
            functions.</para>
            <para>If GLFW has been successfully initialized, this function should be called before
            the application exits. If initialization fails, there is no need to call this function,
            as it is called by <see cref="M:Glfw3.Glfw.Init"/> before it returns failure.</para>
            </summary>
            <remarks>
            This function may be called before <see cref="M:Glfw3.Glfw.Init"/>.
            </remarks>
            <seealso cref="M:Glfw3.Glfw.Init"/>
        </member>
        <member name="M:Glfw3.Glfw.GetVersion(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            This function retrieves the major, minor and revision numbers of the GLFW library. It is
            intended for when you are using GLFW as a shared library and want to ensure that you are
            using the minimum required version.
            </summary>
            <param name="major">Where to store the major version number.</param>
            <param name="minor">Where to store the minor version number.</param>
            <param name="rev">Where to store the revision number.</param>
            <remarks>
            This function may be called before <see cref="M:Glfw3.Glfw.Init"/>.
            </remarks>
            <seealso cref="M:Glfw3.Glfw.GetVersionString"/>
        </member>
        <member name="M:Glfw3.Glfw.GetVersionString">
            <summary>
            <para>This function returns the compile-time generated version string of the GLFW
            library binary. It describes the version, platform, compiler and any platform-specific
            compile-time options. It should not be confused with the OpenGL or OpenGL ES version
            string, queried with <c>glGetString</c>.</para>
            <para><strong>Do not use the version string</strong> to parse the GLFW library version.
            The <see cref="M:Glfw3.Glfw.GetVersion(System.Int32@,System.Int32@,System.Int32@)"/> function provides the version of
            the running library binary in numerical format.</para>
            </summary>
            <returns>The ASCII encoded GLFW version string.</returns>
            <remarks>
            This function may be called before <see cref="M:Glfw3.Glfw.Init"/>.
            </remarks>
            <seealso cref="M:Glfw3.Glfw.GetVersion(System.Int32@,System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetErrorCallback(Glfw3.Glfw.ErrorFunc)">
            <summary>
            <para>This function sets the error callback, which is called with an error code and a
            human-readable description each time a GLFW error occurs.</para>
            <para>The error callback is called on the thread where the error occurred. If you are
            using GLFW from multiple threads, your error callback needs to be written
            accordingly.</para>
            <para>Because the description string may have been generated specifically for that
            error, it is not guaranteed to be valid after the callback has returned. If you wish to
            use it after the callback returns, you need to make a copy.</para>
            <para>Once set, the error callback remains set even after the library has been
            terminated.</para>
            </summary>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
            <remarks>
            This function may be called before <see cref="M:Glfw3.Glfw.Init"/>.
            </remarks>
        </member>
        <member name="M:Glfw3.Glfw.GetMonitors">
            <summary>
            This function returns an array of handles for all currently connected monitors. The
            primary monitor is always first in the returned array. If no monitors were found, this
            function returns <c>null</c>.
            </summary>
            <returns>An array of monitor handles, or <c>null</c> if no monitors were found or if an
            error occurred.</returns>
            <seealso cref="M:Glfw3.Glfw.GetPrimaryMonitor"/>
        </member>
        <member name="M:Glfw3.Glfw.GetPrimaryMonitor">
            <summary>
            This function returns the primary monitor. This is usually the monitor where elements
            like the task bar or global menu bar are located.
            </summary>
            <returns>The primary monitor, or <c>null</c> if no monitors were found or if an error
            occurred.</returns>
            <remarks>
            The primary monitor is always first in the array returned by <see cref="M:Glfw3.Glfw.GetMonitors"/>.
            </remarks>
            <seealso cref="M:Glfw3.Glfw.GetMonitors"/>
        </member>
        <member name="M:Glfw3.Glfw.GetMonitorPos(Glfw3.Glfw.Monitor,System.Int32@,System.Int32@)">
            <summary>
            This function returns the position, in screen coordinates, of the upper-left corner of
            the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <param name="xpos">Where to store the monitor x-coordinate.</param>
            <param name="ypos">Where to store the monitor y-coordinate.</param>
        </member>
        <member name="M:Glfw3.Glfw.GetMonitorPhysicalSize(Glfw3.Glfw.Monitor,System.Int32@,System.Int32@)">
            <summary>
            <para>This function returns the size, in millimetres, of the display area of the
            specified monitor.</para>
            <para>Some systems do not provide accurate monitor size information, either because the
            monitor <a href="https://en.wikipedia.org/wiki/Extended_display_identification_data">EDID</a>
            data is incorrect or because the driver does not report it accurately.</para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <param name="widthMM">Where to store the width, in millimetres, of the monitor's display
            area.</param>
            <param name="heightMM">Where to store the height, in millimetres, of the monitor's
            display area.</param>
            <remarks>
            <strong>Win32: </strong> Calculates the returned physical size from the current
            resolution and system DPI instead of querying the monitor EDID data.
            </remarks>
        </member>
        <member name="M:Glfw3.Glfw.GetMonitorName(Glfw3.Glfw.Monitor)">
            <summary>
            This function returns a human-readable name, encoded as UTF-8, of the specified monitor.
            The name typically reflects the make and model of the monitor and is not guaranteed to
            be unique among the connected monitors.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The UTF-8 encoded name of the monitor, or <c>null</c> if an error
            occurred.</returns>
        </member>
        <member name="M:Glfw3.Glfw.SetMonitorCallback(Glfw3.Glfw.MonitorFunc)">
            <summary>
            This function sets the monitor configuration callback, or removes the currently set
            callback. This is called when a monitor is connected to or disconnected from the system.
            </summary>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.GetVideoModes(Glfw3.Glfw.Monitor)">
            <summary>
            This function returns an array of all video modes supported by the specified monitor.
            The returned array is sorted in ascending order, first by color bit depth (the sum of
            all channel depths) and then by resolution area (the product of width and height).
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>An array of video modes, or <c>null</c> if an error occurred.</returns>
            <seealso cref="M:Glfw3.Glfw.GetVideoMode(Glfw3.Glfw.Monitor)"/>
        </member>
        <member name="M:Glfw3.Glfw.GetVideoMode(Glfw3.Glfw.Monitor)">
            <summary>
            This function returns the current video mode of the specified monitor. If you have
            created a full screen window for that monitor, the return value will depend on whether
            that window is iconified.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The current mode of the monitor, or <c>null</c> if an error occurred.</returns>
            <seealso cref="M:Glfw3.Glfw.GetVideoModes(Glfw3.Glfw.Monitor)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetGamma(Glfw3.Glfw.Monitor,System.Single)">
            <summary>
            This function generates a 256-element gamma ramp from the specified exponent and then
            calls <see cref="M:Glfw3.Glfw.SetGammaRamp(Glfw3.Glfw.Monitor,Glfw3.Glfw.GammaRamp)"/> with it. The value must be a finite
            number greater than zero.
            </summary>
            <param name="monitor">The monitor whose gamma ramp to set.</param>
            <param name="gamma">The desired exponent.</param>
        </member>
        <member name="M:Glfw3.Glfw.GetGammaRamp(Glfw3.Glfw.Monitor)">
            <summary>
            This function returns the current gamma ramp of the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The current gamma ramp, or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:Glfw3.Glfw.SetGammaRamp(Glfw3.Glfw.Monitor,Glfw3.Glfw.GammaRamp)">
            <summary>
            This function sets the current gamma ramp for the specified monitor. The original gamma
            ramp for that monitor is saved by GLFW the first time this function is called and is
            restored by <see cref="M:Glfw3.Glfw.Terminate"/>.
            </summary>
            <param name="monitor">The monitor whose gamma ramp to set.</param>
            <param name="ramp">The gamma ramp to use.</param>
            <remarks>
            Gamma ramp sizes other than 256 are not supported by all platforms or graphics hardware
            (<strong>Win32</strong> requires a 256 gamma ramp size).
            </remarks>
        </member>
        <member name="M:Glfw3.Glfw.DefaultWindowHints">
            <summary>
            This function resets all window hints to their default values.
            </summary>
            <seealso cref="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Boolean)"/>
            <seealso cref="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Enum)"/>
            <seealso cref="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Int32)"/>
        </member>
        <member name="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Boolean)">
            <summary>
            <para>This function sets hints for the next call to
            <see cref="!:CreateWindow(int, int, string)"/>. The hints, once set, retain their values
            until changed by a call to <see cref="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Int32)"/> or
            <see cref="M:Glfw3.Glfw.DefaultWindowHints"/>, or until the library is terminated.</para>
            <para>This function does not check whether the specified hint values are valid.</para>
            <para>If you set hints to invalid values this will instead be reported by the next call
            to <see cref="!:CreateWindow(int, int, string)"/>.</para>
            </summary>
            <param name="hint">The window hint to set.</param>
            <param name="value">The new value of the window hint.</param>
            <seealso cref="M:Glfw3.Glfw.DefaultWindowHints"/>
        </member>
        <member name="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Int32)">
            <summary>
            <para>This function sets hints for the next call to
            <see cref="!:CreateWindow(int, int, string)"/>. The hints, once set, retain their values
            until changed by a call to <see cref="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Int32)"/> or
            <see cref="M:Glfw3.Glfw.DefaultWindowHints"/>, or until the library is terminated.</para>
            <para>This function does not check whether the specified hint values are valid.</para>
            <para>If you set hints to invalid values this will instead be reported by the next call
            to <see cref="!:CreateWindow(int, int, string)"/>.</para>
            </summary>
            <param name="hint">The window hint to set.</param>
            <param name="value">The new value of the window hint.</param>
            <seealso cref="M:Glfw3.Glfw.DefaultWindowHints"/>
        </member>
        <member name="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Enum)">
            <summary>
            <para>This function sets hints for the next call to
            <see cref="!:CreateWindow(int, int, string)"/>. The hints, once set, retain their values
            until changed by a call to <see cref="M:Glfw3.Glfw.WindowHint(Glfw3.Glfw.Hint,System.Int32)"/> or
            <see cref="M:Glfw3.Glfw.DefaultWindowHints"/>, or until the library is terminated.</para>
            <para>This function does not check whether the specified hint values are valid.</para>
            <para>If you set hints to invalid values this will instead be reported by the next call
            to <see cref="!:CreateWindow(int, int, string)"/>.</para>
            </summary>
            <param name="hint">The window hint to set.</param>
            <param name="value">The new value of the window hint.</param>
            <seealso cref="M:Glfw3.Glfw.DefaultWindowHints"/>
        </member>
        <member name="M:Glfw3.Glfw.CreateWindow(System.Int32,System.Int32,System.String,System.Nullable{Glfw3.Glfw.Monitor},System.Nullable{Glfw3.Glfw.Window})">
            <summary>
            <para>This function creates a window and its associated OpenGL or OpenGL ES context.
            Most of the options controlling how the window and its context should be created are
            specified with window hints.</para>
            <para>Successful creation does not change which context is current. Before you can use
            the newly created context, you need to make it current.</para>
            <para>The created window, framebuffer and context may differ from what you requested, as
            not all parameters and hints are hard constraints. This includes the size of the window,
            especially for full screen windows. To query the actual attributes of the created
            window, framebuffer and context see <see cref="M:Glfw3.Glfw.GetWindowAttrib(Glfw3.Glfw.Window,Glfw3.Glfw.WindowAttrib)"/>,
            <see cref="M:Glfw3.Glfw.GetWindowSize(Glfw3.Glfw.Window,System.Int32@,System.Int32@)"/> and
            <see cref="M:Glfw3.Glfw.GetFramebufferSize(Glfw3.Glfw.Window,System.Int32@,System.Int32@)"/>.</para>
            <para>To create a full screen window, you need to specify the monitor the window will
            cover. If no monitor is specified, the window will be windowed mode. Unless you have a
            way for the user to choose a specific monitor, it is recommended that you pick the
            primary monitor.</para>
            <para>For full screen windows, the specified size becomes the resolution of the window's
            <em>desired video mode</em>. As long as a full screen window is not iconified, the
            supported video mode most closely matching the desired video mode is set for the
            specified monitor.</para>
            <para>By default, newly created windows use the placement recommended by the window
            system. To create the window at a specific position, make it initially invisible using
            the <see cref="F:Glfw3.Glfw.Hint.Visible"/> hint, set its position and then show it.</para>
            <para>As long as at least one full screen window is not iconified, the screensaver is
            prohibited from starting.</para>
            <para>Window systems put limits on window sizes. Very large or very small window
            dimensions may be overridden by the window system on creation. Check the actual size
            after creation.</para>
            <para>The swap interval is not set during window creation and the initial value may vary
            depending on driver settings and defaults.</para>
            </summary>
            <param name="width">The desired width, in screen coordinates, of the window. This must
            be greater than zero.</param>
            <param name="height">The desired height, in screen coordinates, of the window. This must
            be greater than zero.</param>
            <param name="title">The initial, UTF-8 encoded window title.</param>
            <param name="monitor">The monitor to use for full screen mode, or <c>null</c> for
            windowed mode.</param>
            <param name="share">The window whose context to share resources with, or <c>null</c> to
            not share resources.</param>
            <returns>The handle of the created window, or <c>null</c> if an error
            occurred.</returns>
            <remarks>
            <para><strong>Win32:</strong> Window creation will fail if the Microsoft GDI software
            OpenGL implementation is the only one available.</para>
            <para><strong>Win32:</strong> If the executable has an icon resource named
            <c>GLFW_ICON</c>, it will be set as the initial icon for the window. If no such icon is
            present, the <c>IDI_WINLOGO</c> icon will be used instead. To set a different icon, use
            <see cref="M:Glfw3.Glfw.SetWindowIcon(Glfw3.Glfw.Window,Glfw3.Glfw.Image)"/>.</para>
            <para><strong>Win32:</strong>The context to share resources with must not be current on
            any other thread.</para>
            <para><strong>OSX:</strong> The GLFW window has no icon, as it is not a document window,
            but the dock icon will be the same as the application bundle's icon. For more
            information on bundles, see the <a href="https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/">
            Bundle Programming Guide</a> in the Mac Developer Library.</para>
            <para><strong>OSX:</strong> The first time a window is created the menu bar is populated
            with common commands like Hide, Quit and About. The About entry opens a minimal about
            dialog with information from the application's bundle.</para>
            <para><strong>OSX:</strong> On OS X 10.10 and later the window frame will not be
            rendered at full resolution on Retina displays unless the <c>NSHighResolutionCapable</c>
            key is enabled in the application bundle's <c>Info.plist</c>. For more information, see
            <a href="https://developer.apple.com/library/mac/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Explained/Explained.html">
            High Resolution Guidelines for OS X</a> in the Mac Developer Library.</para>
            <para><strong>X11:</strong> Some window managers will not respect the placement of
            initially hidden windows</para>
            <para><strong>X11:</strong> Due to the asynchronous nature of X11, it may take a moment
            for a window to reach its requested state.This means you may not be able to query the
            final size, position or other attributes directly after window creation.</para>
            </remarks>
            <seealso cref="M:Glfw3.Glfw.DestroyWindow(Glfw3.Glfw.Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.DestroyWindow(Glfw3.Glfw.Window)">
            <summary>
            <para>This function destroys the specified window and its context. On calling this
            function, no further callbacks will be called for that window.</para>
            <para>If the context of the specified window is current on the main thread, it is
            detached before being destroyed.</para>
            </summary>
            <param name="window">The window to destroy.</param>
            <seealso cref="!:CreateWindow(int, int, string)"/>
            <seealso cref="!:CreateWindow(int, int, string, Monitor, Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.WindowShouldClose(Glfw3.Glfw.Window)">
            <summary>
            This function returns the value of the close flag of the specified window.
            </summary>
            <param name="window">The window to query.</param>
            <returns>The value of the close flag.</returns>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowShouldClose(Glfw3.Glfw.Window,System.Boolean)">
            <summary>
            This function sets the value of the close flag of the specified window. This can be used
            to override the user's attempt to close the window, or to signal that it should be
            closed.
            </summary>
            <param name="window">The window whose flag to change.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowTitle(Glfw3.Glfw.Window,System.String)">
            <summary>
            This function sets the window title, encoded as UTF-8, of the specified window.
            </summary>
            <param name="window">The window whose title to change.</param>
            <param name="title">The UTF-8 encoded window title.</param>
            <remarks>
            <strong>OSX:</strong> The window title will not be updated until the next time you
            process events.
            </remarks>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowIcon(Glfw3.Glfw.Window,Glfw3.Glfw.Image)">
            <summary>
            <para>This function sets the icon of the specified window.</para>
            <para>The desired image sizes varies depending on platform and system settings. The
            selected images will be rescaled as needed. Good sizes include 16x16, 32x32 and
            48x48.</para>
            </summary>
            <param name="window">The window whose icon to set.</param>
            <param name="image">The image to create the icon from.</param>
            <remarks>
            <strong>OSX:</strong> The GLFW window has no icon, as it is not a document window, so
            this function does nothing. The dock icon will be the same as the application bundle's
            icon. For more information on bundles, see the
            <a href="https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/">
            Bundle Programming Guide</a> in the Mac Developer Library.
            </remarks>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowIcon(Glfw3.Glfw.Window,Glfw3.Glfw.Image[])">
            <summary>
            <para>This function sets the icon of the specified window. If passed an array of
            candidate images, those of or closest to the sizes desired by the system are selected.
            If no images are specified, the window reverts to its default icon.</para>
            <para>The desired image sizes varies depending on platform and system settings. The
            selected images will be rescaled as needed. Good sizes include 16x16, 32x32 and
            48x48.</para>
            </summary>
            <param name="window">The window whose icon to set.</param>
            <param name="images">The images to create the icon from.</param>
            <remarks>
            <strong>OSX:</strong> The GLFW window has no icon, as it is not a document window, so
            this function does nothing. The dock icon will be the same as the application bundle's
            icon. For more information on bundles, see the
            <a href="https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/">
            Bundle Programming Guide</a> in the Mac Developer Library.
            </remarks>
        </member>
        <member name="M:Glfw3.Glfw.GetWindowPos(Glfw3.Glfw.Window,System.Int32@,System.Int32@)">
            <summary>
            This function retrieves the position, in screen coordinates, of the upper-left corner of
            the client area of the specified window.
            </summary>
            <param name="window">The window to query.</param>
            <param name="xpos">Where to store the x-coordinate of the upper-left corner of the
            client area.</param>
            <param name="ypos">Where to store the y-coordinate of the upper-left corner of the
            client area.</param>
            <seealso cref="M:Glfw3.Glfw.SetWindowPos(Glfw3.Glfw.Window,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowPos(Glfw3.Glfw.Window,System.Int32,System.Int32)">
            <summary>
            <para>This function sets the position, in screen coordinates, of the upper-left corner
            of the client area of the specified windowed mode window. If the window is a full screen
            window, this function does nothing.</para>
            <para><strong>Do not use this function</strong> to move an already visible window unless
            you have very good reasons for doing so, as it will confuse and annoy the user.</para>
            <para>The window manager may put limits on what positions are allowed. GLFW cannot and
            should not override these limits.</para>
            </summary>
            <param name="window">The window to query.</param>
            <param name="xpos">The x-coordinate of the upper-left corner of the client area.</param>
            <param name="ypos">The y-coordinate of the upper-left corner of the client area.</param>
            <seealso cref="M:Glfw3.Glfw.GetWindowPos(Glfw3.Glfw.Window,System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:Glfw3.Glfw.GetWindowSize(Glfw3.Glfw.Window,System.Int32@,System.Int32@)">
            <summary>
            This function retrieves the size, in screen coordinates, of the client area of the
            specified window.If you wish to retrieve the size of the framebuffer of the window in
            pixels, see <see cref="M:Glfw3.Glfw.GetFramebufferSize(Glfw3.Glfw.Window,System.Int32@,System.Int32@)"/>.
            </summary>
            <param name="window">The window whose size to retrieve.</param>
            <param name="width">Where to store the width, in screen coordinates, of the client
            area.</param>
            <param name="height">Where to store the height, in screen coordinates, of the client
            area.</param>
            <seealso cref="M:Glfw3.Glfw.SetWindowSize(Glfw3.Glfw.Window,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowSizeLimits(Glfw3.Glfw.Window,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This function sets the size limits of the client area of the specified window. If
            the window is full screen, the size limits only take effect once it is made windowed. If
            the window is not resizable, this function does nothing.</para>
            <para>The size limits are applied immediately to a windowed mode window and may cause it
            to be resized.</para>
            <para>The maximum dimensions must be greater than or equal to the minimum dimensions and
            all must be greater than or equal to zero.</para>
            </summary>
            <param name="window">The window to set limits for.</param>
            <param name="minwidth">The minimum width, in screen coordinates, of the client area, or
            <see cref="F:Glfw3.Glfw.DontCare"/>.</param>
            <param name="minheight">The minimum height, in screen coordinates, of the client area,
            or <see cref="F:Glfw3.Glfw.DontCare"/>.</param>
            <param name="maxwidth">The maximum width, in screen coordinates, of the client area, or
            <see cref="F:Glfw3.Glfw.DontCare"/>.</param>
            <param name="maxheight">The maximum height, in screen coordinates, of the client area,
            or <see cref="F:Glfw3.Glfw.DontCare"/>.</param>
            <remarks>
            If you set size limits and an aspect ratio that conflict, the results are undefined.
            </remarks>
            <seealso cref="M:Glfw3.Glfw.SetWindowAspectRatio(Glfw3.Glfw.Window,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowAspectRatio(Glfw3.Glfw.Window,System.Int32,System.Int32)">
            <summary>
            <para>This function sets the required aspect ratio of the client area of the specified
            window. If the window is full screen, the aspect ratio only takes effect once it is
            made windowed.  If the window is not resizable, this function does nothing.</para>
            <para>The aspect ratio is specified as a numerator and a denominator and both values
            must be greater than zero. For example, the common 16:9 aspect ratio is specified as 16
            and 9, respectively.</para>
            <para>If the numerator and denominator is set to <see cref="F:Glfw3.Glfw.DontCare"/> then the aspect
            ratio limit is disabled.</para>
            <para>The aspect ratio is applied immediately to a windowed mode window and may cause it
            to be resized.</para>
            </summary>
            <param name="window">The window to set limits for.</param>
            <param name="numer">The numerator of the desired aspect ratio, or
            <see cref="F:Glfw3.Glfw.DontCare"/>.</param>
            <param name="denom">The denominator of the desired aspect ratio, or
            <see cref="F:Glfw3.Glfw.DontCare"/>.</param>
            <remarks>
            If you set size limits and an aspect ratio that conflict, the results are undefined.
            </remarks>
            <seealso cref="M:Glfw3.Glfw.SetWindowSizeLimits(Glfw3.Glfw.Window,System.Int32,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowSize(Glfw3.Glfw.Window,System.Int32,System.Int32)">
            <summary>
            <para>This function sets the size, in screen coordinates, of the client area of the
            specified window.</para>
            <para>For full screen windows, this function updates the resolution of its desired video
            mode and switches to the video mode closest to it, without affecting the window's
            context. As the context is unaffected, the bit depths of the framebuffer remain
            unchanged.</para>
            <para>If you wish to update the refresh rate of the desired video mode in addition to
            its resolution, see @ref glfwSetWindowMonitor.</para>
            <para>The window manager may put limits on what sizes are allowed.GLFW cannot and should
            not override these limits.</para>
            </summary>
            <param name="window">The window to resize.</param>
            <param name="width">The desired width, in screen coordinates, of the window client
            area.</param>
            <param name="height">The desired height, in screen coordinates, of the window client
            area.</param>
            <seealso cref="M:Glfw3.Glfw.GetWindowSize(Glfw3.Glfw.Window,System.Int32@,System.Int32@)"/>
            <seealso cref="M:Glfw3.Glfw.SetWindowMonitor(Glfw3.Glfw.Window,Glfw3.Glfw.Monitor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Glfw3.Glfw.GetFramebufferSize(Glfw3.Glfw.Window,System.Int32@,System.Int32@)">
            <summary>
            This function retrieves the size, in pixels, of the framebuffer of the specified window.
            If you wish to retrieve the size of the window in screen coordinates, see
            <see cref="M:Glfw3.Glfw.GetWindowSize(Glfw3.Glfw.Window,System.Int32@,System.Int32@)"/>.
            </summary>
            <param name="window">The window whose framebuffer to query.</param>
            <param name="width">Where to store the width, in pixels, of the framebuffer.</param>
            <param name="height">Where to store the height, in pixels, of the framebuffer.</param>
            <seealso cref="M:Glfw3.Glfw.SetFramebufferSizeCallback(Glfw3.Glfw.Window,Glfw3.Glfw.FramebufferSizeFunc)"/>
        </member>
        <member name="M:Glfw3.Glfw.GetWindowFrameSize(Glfw3.Glfw.Window,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>This function retrieves the size, in screen coordinates, of each edge of the frame
            of the specified window. This size includes the title bar, if the window has one. The
            size of the frame may vary depending on the window - related hints used to create
            it.</para>
            <para>Because this function retrieves the size of each window frame edge and not the
            offset along a particular coordinate axis, the retrieved values will always be zero or
            positive.</para>
            </summary>
            <param name="window">The window whose frame size to query.</param>
            <param name="left">Where to store the size, in screen coordinates, of the left edge of
            the window frame.</param>
            <param name="top">Where to store the size, in screen coordinates, of the top edge of the
            window frame.</param>
            <param name="right">Where to store the size, in screen coordinates, of the right edge of
            the window frame.</param>
            <param name="bottom">Where to store the size, in screen coordinates, of the bottom edge
            of the window frame.</param>
        </member>
        <member name="M:Glfw3.Glfw.IconifyWindow(Glfw3.Glfw.Window)">
            <summary>
            <para>This function iconifies (minimizes) the specified window if it was previously
            restored. If the window is already iconified, this function does nothing.</para>
            <para>If the specified window is a full screen window, the original monitor resolution
            is restored until the window is restored.</para>
            </summary>
            <param name="window">The window to iconify.</param>
            <seealso cref="M:Glfw3.Glfw.RestoreWindow(Glfw3.Glfw.Window)"/>
            <seealso cref="M:Glfw3.Glfw.MaximizeWindow(Glfw3.Glfw.Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.RestoreWindow(Glfw3.Glfw.Window)">
            <summary>
            <para>This function restores the specified window if it was previously iconified
            (minimized) or maximized.If the window is already restored, this function does
            nothing.</para>
            <para>If the specified window is a full screen window, the resolution chosen for the
            window is restored on the selected monitor.</para>
            </summary>
            <param name="window">The window to restore.</param>
            <seealso cref="M:Glfw3.Glfw.IconifyWindow(Glfw3.Glfw.Window)"/>
            <seealso cref="M:Glfw3.Glfw.MaximizeWindow(Glfw3.Glfw.Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.MaximizeWindow(Glfw3.Glfw.Window)">
            <summary>
            <para>This function maximizes the specified window if it was previously not maximized.
            If the window is already maximized, this function does nothing.</para>
            <para>If the specified window is a full screen window, this function does
            nothing.</para>
            </summary>
            <param name="window">The window to maximize.</param>
            <seealso cref="M:Glfw3.Glfw.IconifyWindow(Glfw3.Glfw.Window)"/>
            <seealso cref="M:Glfw3.Glfw.RestoreWindow(Glfw3.Glfw.Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.ShowWindow(Glfw3.Glfw.Window)">
            <summary>
            This function makes the specified window visible if it was previously hidden. If the
            window is already visible or is in full screen mode, this function does nothing.
            </summary>
            <param name="window">The window to make visible.</param>
            <seealso cref="M:Glfw3.Glfw.HideWindow(Glfw3.Glfw.Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.HideWindow(Glfw3.Glfw.Window)">
            <summary>
            This function hides the specified window if it was previously visible. If the window is
            already hidden or is in full screen mode, this function does nothing.
            </summary>
            <param name="window">The window to hide.</param>
            <seealso cref="M:Glfw3.Glfw.ShowWindow(Glfw3.Glfw.Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.FocusWindow(Glfw3.Glfw.Window)">
            <summary>
            <para>This function brings the specified window to front and sets input focus. The
            window should already be visible and not iconified.</para>
            <para>By default, both windowed and full screen mode windows are focused when initially
            created. Set the <see cref="F:Glfw3.Glfw.Hint.Focused"/> hint to disable this behavior.</para>
            <para><strong>Do not use this function</strong> to steal focus from other applications
            unless you are certain that is what the user wants. Focus stealing can be extremely
            disruptive.</para>
            </summary>
            <param name="window">The window to give input focus.</param>
        </member>
        <member name="M:Glfw3.Glfw.GetWindowMonitor(Glfw3.Glfw.Window)">
            <summary>
            This function returns the handle of the monitor that the specified window is in full
            screen on.
            </summary>
            <param name="window">The window to query.</param>
            <returns>The monitor, or <see cref="F:Glfw3.Glfw.Monitor.None"/> if the window is in windowed mode or
            an error occurred.</returns>
            <seealso cref="M:Glfw3.Glfw.SetWindowMonitor(Glfw3.Glfw.Window,Glfw3.Glfw.Monitor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowMonitor(Glfw3.Glfw.Window,Glfw3.Glfw.Monitor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This function sets the monitor that the window uses for full screen mode or, if
            the monitor is <see cref = "F:Glfw3.Glfw.Monitor.None" />, makes it windowed mode.</para>
            <para>When setting a monitor, this function updates the width, height and refresh rate
            of the desired video mode and switches to the video mode closest to it. The window
            position is ignored when setting a monitor.</para>
            <para>When the monitor is <see cref = "F:Glfw3.Glfw.Monitor.None" />, the position, width and height
            are used to place the window client area. The refresh rate is ignored when no monitor is
            specified.</para>
            <para>If you only wish to update the resolution of a full screen window or the size of a
            windowed mode window, see <see cref="M:Glfw3.Glfw.SetWindowSize(Glfw3.Glfw.Window,System.Int32,System.Int32)"/>"/>.</para>
            <para>When a window transitions from full screen to windowed mode, this function
            restores any previous window settings such as whether it is decorated, floating,
            resizable, has size or aspect ratio limits, etc...</para>
            </summary>
            <param name="window">The window whose monitor, size or video mode to set.</param>
            <param name="monitor">The desired monitor, or <see cref="F:Glfw3.Glfw.Monitor.None"/> to set windowed
            mode.</param>
            <param name="xpos">The desired x-coordinate of the upper-left corner of the client
            area.</param>
            <param name="ypos">The desired y-coordinate of the upper-left corner of the client
            area.</param>
            <param name="width">The desired with, in screen coordinates, of the client area or video
            mode.</param>
            <param name="height">The desired height, in screen coordinates, of the client area or
            video mode.</param>
            <param name="refreshRate">The desired refresh rate, in Hz, of the video mode, or
            <see cref="F:Glfw3.Glfw.DontCare"/>.</param>
            <seealso cref="M:Glfw3.Glfw.GetWindowMonitor(Glfw3.Glfw.Window)"/>
            <seealso cref="M:Glfw3.Glfw.SetWindowSize(Glfw3.Glfw.Window,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Glfw3.Glfw.GetWindowAttrib(Glfw3.Glfw.Window,Glfw3.Glfw.WindowAttrib)">
            <summary>
            This function returns the value of an attribute of the specified window or its OpenGL or
            OpenGL ES context.
            </summary>
            <param name="window">The window to query.</param>
            <param name="attrib">The window attribute whose value to return.</param>
            <returns>The value of the attribute, or <c>false</c> if an error occurred.</returns>
            <remarks>
            Framebuffer related hints are not window attributes.
            </remarks>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowUserPointer(Glfw3.Glfw.Window,System.IntPtr)">
            <summary>
            This function sets the user-defined pointer of the specified window. The current value
            is retained until the window is destroyed. The initial value is <c>IntPtr.Zero</c>.
            </summary>
            <param name="window">The window whose pointer to set.</param>
            <param name="ptr">The new value.</param>
            <seealso cref="M:Glfw3.Glfw.GetWindowUserPointer(Glfw3.Glfw.Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.GetWindowUserPointer(Glfw3.Glfw.Window)">
            <summary>
            This function sets the user-defined pointer of the specified window. The initial value
            is <c>IntPtr.Zero</c>.
            </summary>
            <param name="window">The window whose pointer to return.</param>
            <returns>The user-defined pointer of the specified window.</returns>
            <seealso cref="M:Glfw3.Glfw.SetWindowUserPointer(Glfw3.Glfw.Window,System.IntPtr)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowPosCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowPosFunc)">
            <summary>
            This function sets the position callback of the specified window, which is called when
            the window is moved. The callback is provided with the screen position of the upper-left
            corner of the client area of the window.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowSizeCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowSizeFunc)">
            <summary>
            This function sets the size callback of the specified window, which is called when the
            window is resized. The callback is provided with the size, in screen coordinates, of the
            client area of the window.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowCloseCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowCloseFunc)">
            <summary>
            <para>This function sets the close callback of the specified window, which is called
            when the user attempts to close the window, for example by clicking the close widget in
            the title bar.</para>
            <para>The close flag is set before this callback is called, but you can modify it at any
            time with <see cref="M:Glfw3.Glfw.SetWindowShouldClose(Glfw3.Glfw.Window,System.Boolean)"/>.</para>
            <para>The close callback is not triggered by <see cref="M:Glfw3.Glfw.DestroyWindow(Glfw3.Glfw.Window)"/>.</para>
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
            <remarks>
            <strong>OSX:</strong> Selecting Quit from the application menu will trigger the close
            callback for all windows.
            </remarks>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowRefreshCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowRefreshFunc)">
            <summary>
            <para>This function sets the refresh callback of the specified window, which is called
            when the client area of the window needs to be redrawn, for example if the window has
            been exposed after having been covered by another window.</para>
            <para>On compositing window systems such as Aero, Compiz or Aqua, where the window
            contents are saved off-screen, this callback may be called only very infrequently or
            never at all.</para>
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowFocusCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowFocusFunc)">
            <summary>
            <para>This function sets the focus callback of the specified window, which is called
            when the window gains or loses input focus.</para>
            <para>After the focus callback is called for a window that lost input focus, synthetic
            key and mouse button release events will be generated for all such that had been
            pressed. For more information, see <see cref="M:Glfw3.Glfw.SetKeyCallback(Glfw3.Glfw.Window,Glfw3.Glfw.KeyFunc)"/> and
            <see cref="M:Glfw3.Glfw.SetMouseButtonCallback(Glfw3.Glfw.Window,Glfw3.Glfw.MouseButtonFunc)"/>.</para>
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetWindowIconifyCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowIconifyFunc)">
            <summary>
            This function sets the iconification callback of the specified window, which is called
            when the window is iconified or restored.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetFramebufferSizeCallback(Glfw3.Glfw.Window,Glfw3.Glfw.FramebufferSizeFunc)">
            <summary>
            This function sets the framebuffer resize callback of the specified window, which is
            called when the framebuffer of the specified window is resized.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.PollEvents">
            <summary>
            <para>This function processes only those events that are already in the event queue and
            then returns immediately. Processing events will cause the window and input callbacks
            associated with those events to be called.</para>
            <para>On some platforms, a window move, resize or menu operation will cause event
            processing to block. This is due to how event processing is designed on those platforms.
            You can use the window refresh callback to redraw the contents of your window when
            necessary during such operations.</para>
            <para>On some platforms, certain events are sent directly to the application without
            going through the event queue, causing callbacks to be called outside of a call to one
            of the event processing functions.</para>
            <para>Event processing is not required for joystick input to work.</para>
            </summary>
            <seealso cref="M:Glfw3.Glfw.WaitEvents"/>
            <seealso cref="M:Glfw3.Glfw.WaitEventsTimeout(System.Double)"/>
        </member>
        <member name="M:Glfw3.Glfw.WaitEvents">
            <summary>
            <para>This function puts the calling thread to sleep until at least one event is
            available in the event queue. Once one or more events are available, it behaves exactly
            like <see cref="M:Glfw3.Glfw.PollEvents"/>, i.e. the events in the queue are processed and the
            function then returns immediately. Processing events will cause the window and input
            callbacks associated with those events to be called.</para>
            <para>Since not all events are associated with callbacks, this function may return
            without a callback having been called even if you are monitoring all callbacks.</para>
            <para>On some platforms, a window move, resize or menu operation will cause event
            processing to block. This is due to how event processing is designed on those platforms.
            You can use the window refresh callback to redraw the contents of your window when
            necessary during such operations.</para>
            <para>On some platforms, certain callbacks may be called outside of a call to one of the
            event processing functions.</para>
            <para>If no windows exist, this function returns immediately. For synchronization of
            threads in applications that do not create windows, use your threading library of
            choice.</para>
            <para>Event processing is not required for joystick input to work.</para>
            </summary>
            <seealso cref="M:Glfw3.Glfw.PollEvents"/>
            <seealso cref="M:Glfw3.Glfw.WaitEventsTimeout(System.Double)"/>
        </member>
        <member name="M:Glfw3.Glfw.WaitEventsTimeout(System.Double)">
            <summary>
            <para>This function puts the calling thread to sleep until at least one event is
            available in the event queue, or until the specified timeout is reached. Once one or
            more events are available, it behaves exactly like <see cref="M:Glfw3.Glfw.PollEvents"/>, i.e. the
            events in the queue are processed and the function then returns immediately. Processing
            events will cause the window and input callbacks associated with those events to be
            called.</para>
            <para>Since not all events are associated with callbacks, this function may return
            without a callback having been called even if you are monitoring all callbacks.</para>
            <para>On some platforms, a window move, resize or menu operation will cause event
            processing to block. This is due to how event processing is designed on those platforms.
            You can use the window refresh callback to redraw the contents of your window when
            necessary during such operations.</para>
            <para>On some platforms, certain callbacks may be called outside of a call to one of the
            event processing functions.</para>
            <para>If no windows exist, this function returns immediately. For synchronization of
            threads in applications that do not create windows, use your threading library of
            choice.</para>
            <para>Event processing is not required for joystick input to work.</para>
            </summary>
            <param name="timeout">The maximum amount of time, in seconds, to wait.</param>
            <seealso cref="M:Glfw3.Glfw.PollEvents"/>
            <seealso cref="M:Glfw3.Glfw.WaitEvents"/>
        </member>
        <member name="M:Glfw3.Glfw.PostEmptyEvent">
            <summary>
            <para>This function posts an empty event from the current thread to the event queue,
            causing <see cref="M:Glfw3.Glfw.WaitEvents"/> or <see cref="M:Glfw3.Glfw.WaitEventsTimeout(System.Double)"/> to
            return.</para>
            <para>If no windows exist, this function returns immediately. For synchronization of
            threads in applications that do not create windows, use your threading library of
            choice.</para>
            </summary>
        </member>
        <member name="M:Glfw3.Glfw.GetInputMode(Glfw3.Glfw.Window,Glfw3.Glfw.InputMode)">
            <summary>
            This function returns the value of an input option for the specified window.
            </summary>
            <param name="window">The window to query.</param>
            <param name="mode">One of <see cref="T:Glfw3.Glfw.InputMode"/>.</param>
            <returns>The value of an input option for the specified window.</returns>
        </member>
        <member name="M:Glfw3.Glfw.SetInputMode(Glfw3.Glfw.Window,Glfw3.Glfw.InputMode,Glfw3.Glfw.CursorMode)">
            <summary>
            <para>This function sets an input mode option for the specified window.</para>
            <para>If the mode is <see cref="F:Glfw3.Glfw.InputMode.Cursor"/>, the value must be one of the
            following cursor modes:</para>
            <list type="bullet">
                <item><see cref="F:Glfw3.Glfw.CursorMode.Normal"/> makes the cursor visible and behaving
                normally.</item>
                <item><see cref="F:Glfw3.Glfw.CursorMode.Hidden"/> makes the cursor invisible when it is over the
                client area of the window but does not restrict the cursor from leaving.</item>
                <item><see cref="F:Glfw3.Glfw.CursorMode.Disabled"/> hides and grabs the cursor, providing
                virtual and unlimited cursor movement.This is useful for implementing for example 3D
                camera controls.</item>
            </list>
            <para>If the mode is <see cref="F:Glfw3.Glfw.InputMode.StickyKeys"/>, the value must be either
            <c>true</c> to enable sticky keys, or <c>false</c> to disable it. If sticky keys are
            enabled, a key press will ensure that <see cref="M:Glfw3.Glfw.GetKey(Glfw3.Glfw.Window,System.Int32)"/> returns
            <see cref="F:Glfw3.Glfw.InputState.Press"/> the next time it is called even if the key had been
            released before the call. This is useful when you are only interested in whether keys
            have been pressed but not when or in which order.</para>
            <para>If the mode is <see cref="F:Glfw3.Glfw.InputMode.StickyMouseButton"/>, the value must be either
            <c>true</c> to enable sticky mouse buttons, or <c>false</c> to disable it. If sticky
            mouse buttons are enabled, a mouse button press will ensure that
            <see cref="!:GetMouseButton(Window, int)"/> returns <see cref="F:Glfw3.Glfw.InputState.Press"/> the
            next time it is called even if the mouse button had been released before the call. This
            is useful when you are only interested in whether mouse buttons have been pressed but
            not when or in which order.</para>
            </summary>
            <param name="window">The window whose input mode to set.</param>
            <param name="mode">One of <see cref="T:Glfw3.Glfw.InputMode"/>.</param>
            <param name="value">The new value of the specified input mode.</param>
            <seealso cref="M:Glfw3.Glfw.GetInputMode(Glfw3.Glfw.Window,Glfw3.Glfw.InputMode)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetInputMode(Glfw3.Glfw.Window,Glfw3.Glfw.InputMode,System.Boolean)">
            <summary>
            <para>This function sets an input mode option for the specified window.</para>
            <para>If the mode is <see cref="F:Glfw3.Glfw.InputMode.Cursor"/>, the value must be one of the
            following cursor modes:</para>
            <list type="bullet">
                <item><see cref="F:Glfw3.Glfw.CursorMode.Normal"/> makes the cursor visible and behaving
                normally.</item>
                <item><see cref="F:Glfw3.Glfw.CursorMode.Hidden"/> makes the cursor invisible when it is over the
                client area of the window but does not restrict the cursor from leaving.</item>
                <item><see cref="F:Glfw3.Glfw.CursorMode.Disabled"/> hides and grabs the cursor, providing
                virtual and unlimited cursor movement.This is useful for implementing for example 3D
                camera controls.</item>
            </list>
            <para>If the mode is <see cref="F:Glfw3.Glfw.InputMode.StickyKeys"/>, the value must be either
            <c>true</c> to enable sticky keys, or <c>false</c> to disable it. If sticky keys are
            enabled, a key press will ensure that <see cref="M:Glfw3.Glfw.GetKey(Glfw3.Glfw.Window,System.Int32)"/> returns
            <see cref="F:Glfw3.Glfw.InputState.Press"/> the next time it is called even if the key had been
            released before the call. This is useful when you are only interested in whether keys
            have been pressed but not when or in which order.</para>
            <para>If the mode is <see cref="F:Glfw3.Glfw.InputMode.StickyMouseButton"/>, the value must be either
            <c>true</c> to enable sticky mouse buttons, or <c>false</c> to disable it. If sticky
            mouse buttons are enabled, a mouse button press will ensure that
            <see cref="!:GetMouseButton(Window, int)"/> returns <see cref="F:Glfw3.Glfw.InputState.Press"/> the
            next time it is called even if the mouse button had been released before the call. This
            is useful when you are only interested in whether mouse buttons have been pressed but
            not when or in which order.</para>
            </summary>
            <param name="window">The window whose input mode to set.</param>
            <param name="mode">One of <see cref="T:Glfw3.Glfw.InputMode"/>.</param>
            <param name="value">The new value of the specified input mode.</param>
            <seealso cref="M:Glfw3.Glfw.GetInputMode(Glfw3.Glfw.Window,Glfw3.Glfw.InputMode)"/>
        </member>
        <member name="M:Glfw3.Glfw.GetKeyName(Glfw3.Glfw.KeyCode,System.Int32)">
            <summary>
            <para>This function returns the localized name of the specified printable key. This is
            intended for displaying key bindings to the user.</para>
            <para>If the key is <see cref="F:Glfw3.Glfw.KeyCode.Unknown"/>, the scancode is used instead,
            otherwise the scancode is ignored. If a non-printable key or (if the key is
            <see cref="F:Glfw3.Glfw.KeyCode.Unknown"/>) a scancode that maps to a non-printable key is specified,
            this function returns <c>null</c>.</para>
            <para>This behavior allows you to pass in the arguments passed to the key callback without modification.</para>
            <para>The printable keys are:</para>
            <list type="bullet">
                <item><see cref="F:Glfw3.Glfw.KeyCode.Apostrophe"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.Comma"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.Minus"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.Period"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.Slash"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.SemiColon"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.Equal"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.LeftBracket"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.RightBracket"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.Backslash"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.World1"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.World2"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.Alpha0"/> to <see cref="F:Glfw3.Glfw.KeyCode.Alpha9"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.A"/> to <see cref="F:Glfw3.Glfw.KeyCode.Z"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.Numpad0"/> to <see cref="F:Glfw3.Glfw.KeyCode.Numpad9"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.NumpadDecimal"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.NumpadDivide"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.NumpadMultiply"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.NumpadSubtract"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.NumpadAdd"/></item>
                <item><see cref="F:Glfw3.Glfw.KeyCode.NumpadEqual"/></item>
            </list>
            </summary>
            <param name="key">The key to query, or <see cref="F:Glfw3.Glfw.KeyCode.Unknown"/>.</param>
            <param name="scancode">The scancode of the key to query.</param>
            <returns>The localized name of the key, or <c>null</c>.</returns>
        </member>
        <member name="M:Glfw3.Glfw.GetKey(Glfw3.Glfw.Window,System.Int32)">
            <summary>
            <para>This function returns the last state reported for the specified key to the
            specified window. The returned state is one of <see cref="F:Glfw3.Glfw.InputState.Press"/> or
            <see cref="F:Glfw3.Glfw.InputState.Release"/>. The higher-level action
            <see cref="F:Glfw3.Glfw.InputState.Repeat"/> is only reported to the key callback.</para>
            <para>If the <see cref="F:Glfw3.Glfw.InputMode.StickyKeys"/> input mode is enabled, this function
            returns <see cref="F:Glfw3.Glfw.InputState.Press"/> the first time you call it for a key that was
            pressed, even if that key has already been released.</para>
            <para>The key functions deal with physical keys, with key tokens named after their use
            on the standard US keyboard layout. If you want to input text, use the Unicode character
            callback instead.</para>
            <para>The modifier key bit masks are not key tokens and cannot be used with this
            function.</para>
            <para><strong>Do not use this function</strong> to implement text input.</para>
            </summary>
            <param name="window">The desired window.</param>
            <param name="key">The desired keyboard key. <see cref="F:Glfw3.Glfw.KeyCode.Unknown"/> is not a valid
            key for this function.</param>
            <returns>One of <see cref="F:Glfw3.Glfw.InputState.Press"/> or
            <see cref="F:Glfw3.Glfw.InputState.Release"/>.</returns>
        </member>
        <member name="M:Glfw3.Glfw.GetMouseButton(Glfw3.Glfw.Window,Glfw3.Glfw.MouseButton)">
            <summary>
            <para>This function returns the last state reported for the specified mouse button to
            the specified window. The returned state is one of <see cref="F:Glfw3.Glfw.InputState.Press"/> or
            <see cref="F:Glfw3.Glfw.InputState.Release"/>.</para>
            <para>If the <see cref="F:Glfw3.Glfw.InputMode.StickyKeys"/> input mode is enabled, this function
            <see cref="F:Glfw3.Glfw.InputState.Press"/> the first time you call it for a mouse button that was
            pressed, even if that mouse button has already been released.</para>
            </summary>
            <param name="window">The desired window.</param>
            <param name="button">The desired mouse button.</param>
            <returns><c>true</c> if the button was pressed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Glfw3.Glfw.GetCursorPos(Glfw3.Glfw.Window,System.Double@,System.Double@)">
            <summary>
            <para>This function returns the position of the cursor, in screen coordinates, relative
            to the upper-left corner of the client area of the specified window.</para>
            <para>If the cursor is disabled (with <see cref="F:Glfw3.Glfw.CursorMode.Disabled"/>) then the cursor
            position is unbounded and limited only by the minimum and maximum values of a
            <c>double</c>.</para>
            <para>The coordinate can be converted to their integer equivalents with the <c>floor</c>
            function. Casting directly to an integer type works for positive coordinates, but fails
            for negative ones.</para>
            </summary>
            <param name="window">The desired window.</param>
            <param name="xpos">Where to store the cursor x-coordinate, relative to the left edge of
            the client area.</param>
            <param name="ypos">Where to store the cursor y-coordinate, relative to the to top edge
            of the client area.</param>
            <seealso cref="M:Glfw3.Glfw.SetCursorPos(Glfw3.Glfw.Window,System.Double,System.Double)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetCursorPos(Glfw3.Glfw.Window,System.Double,System.Double)">
            <summary>
            <para>This function sets the position, in screen coordinates, of the cursor relative to
            the upper-left corner of the client area of the specified window. The window must have
            input focus. If the window does not have input focus when this function is called, it
            fails silently.</para>
            <para><strong>Do not use this function</strong> to implement things like camera
            controls. GLFW already provides the <see cref = "F:Glfw3.Glfw.CursorMode.Disabled" /> cursor mode
            that hides the cursor, transparently re-centers it and provides unconstrained cursor
            motion. See <see cref="M:Glfw3.Glfw.SetInputMode(Glfw3.Glfw.Window,Glfw3.Glfw.InputMode,Glfw3.Glfw.CursorMode)"/> for more
            information.</para>
            <para>If the cursor mode is <see cref = "F:Glfw3.Glfw.CursorMode.Disabled" /> then the cursor
            position is unconstrained and limited only by the minimum and maximum values of a
            <c>double</c>.</para>
            </summary>
            <param name="window">The desired window.</param>
            <param name="xpos">The desired x-coordinate, relative to the left edge of the client
            area.</param>
            <param name="ypos"> The desired y-coordinate, relative to the top edge of the client
            area.</param>
            <seealso cref="M:Glfw3.Glfw.GetCursorPos(Glfw3.Glfw.Window,System.Double@,System.Double@)"/>
        </member>
        <member name="M:Glfw3.Glfw.CreateCursor(Glfw3.Glfw.Image,System.Int32,System.Int32)">
            <summary>
            <para>Creates a new custom cursor image that can be set for a window with
            <see cref="M:Glfw3.Glfw.SetCursor(Glfw3.Glfw.Window,Glfw3.Glfw.Cursor)"/>. The cursor can be destroyed with
            <see cref="M:Glfw3.Glfw.DestroyCursor(Glfw3.Glfw.Cursor)"/>. Any remaining cursors are destroyed by
            <see cref="M:Glfw3.Glfw.Terminate"/>.</para>
            <para>The pixels are 32-bit, little-endian, non-premultiplied RGBA, i.e. eight bits per
            channel.  They are arranged canonically as packed sequential rows, starting from the
            top-left corner.</para>
            <para>The cursor hotspot is specified in pixels, relative to the upper-left corner of
            the cursor image. Like all other coordinate systems in GLFW, the X-axis points to the
            right and the Y-axis points down.</para>
            </summary>
            <param name="image">The desired cursor image.</param>
            <param name="xhot">The desired x-coordinate, in pixels, of the cursor hotspot.</param>
            <param name="yhot">The desired y-coordinate, in pixels, of the cursor hotspot.</param>
            <returns>The handle of the created cursor.</returns>
            <seealso cref="M:Glfw3.Glfw.DestroyCursor(Glfw3.Glfw.Cursor)"/>
            <seealso cref="M:Glfw3.Glfw.CreateStandardCursor(Glfw3.Glfw.CursorType)"/>
        </member>
        <member name="M:Glfw3.Glfw.CreateStandardCursor(Glfw3.Glfw.CursorType)">
            <summary>
            Returns a cursor with a standard shape, that can be set for a window with
            <see cref="M:Glfw3.Glfw.CreateCursor(Glfw3.Glfw.Image,System.Int32,System.Int32)"/>.
            </summary>
            <param name="cursor">One of the standard shapes.</param>
            <returns>A new cursor ready to use.</returns>
        </member>
        <member name="M:Glfw3.Glfw.DestroyCursor(Glfw3.Glfw.Cursor)">
            <summary>
            This function destroys a cursor previously created with
            <see cref="M:Glfw3.Glfw.CreateCursor(Glfw3.Glfw.Image,System.Int32,System.Int32)"/>. Any remaining cursors will be destroyed by
            <see cref="M:Glfw3.Glfw.Terminate"/>.
            </summary>
            <param name="cursor">The cursor object to destroy.</param>
            <seealso cref="M:Glfw3.Glfw.CreateCursor(Glfw3.Glfw.Image,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Glfw3.Glfw.SetCursor(Glfw3.Glfw.Window,Glfw3.Glfw.Cursor)">
            <summary>
            <para>This function sets the cursor image to be used when the cursor is over the client
            area of the specified window.The set cursor will only be visible when the cursor mode
            of the window is <see cref="F:Glfw3.Glfw.CursorMode.Normal"/>.</para>
            <para>On some platforms, the set cursor may not be visible unless the window also has
            input focus.</para>
            </summary>
            <param name="window">The window to set the cursor for.</param>
            <param name="cursor">The cursor to set.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetKeyCallback(Glfw3.Glfw.Window,Glfw3.Glfw.KeyFunc)">
            <summary>
            <para>This function sets the key callback of the specified window, which is called when
            a key is pressed, repeated or released.</para>
            <para>The key functions deal with physical keys, with layout independent key tokens
            named after their values in the standard US keyboard layout. If you want to input text,
            use the <see cref="M:Glfw3.Glfw.SetCharCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CharFunc)"/> instead.</para>
            <para>When a window loses input focus, it will generate synthetic key release events for
            all pressed keys. You can tell these events from user-generated events by the fact that
            the synthetic ones are generated after the focus loss event has been processed, i.e.
            after the <see cref="M:Glfw3.Glfw.SetWindowFocusCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowFocusFunc)"/> has been
            called.</para>
            <para>The scancode of a key is specific to that platform or sometimes even to that
            machine. Scancodes are intended to allow users to bind keys that don't have a GLFW key
            token. Such keys have <c>key</c> set to <see cref="F:Glfw3.Glfw.KeyCode.Unknown"/>, their state is
            not saved and so it cannot be queried with <see cref="M:Glfw3.Glfw.GetKey(Glfw3.Glfw.Window,System.Int32)"/>.</para>
            <para>Sometimes GLFW needs to generate synthetic key events, in which case the scancode
            may be zero.</para>
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetCharCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CharFunc)">
            <summary>
            <para>This function sets the character callback of the specified window, which is called
            when a Unicode character is input.</para>
            <para>The character callback is intended for Unicode text input. As it deals with
            characters, it is keyboard layout dependent, whereas
            <see cref="M:Glfw3.Glfw.SetKeyCallback(Glfw3.Glfw.Window,Glfw3.Glfw.KeyFunc)"/> is not. Characters do not map 1:1 to
            physical keys, as a key may produce zero, one or more characters. If you want to know
            whether a specific physical key was pressed or released, see the key callback
            instead.</para>
            <para>The character callback behaves as system text input normally does and will not be
            called if modifier keys are held down that would prevent normal text input on that
            platform, for example a Super (Command) key on OS X or Alt key on Windows. There is
            <see cref="M:Glfw3.Glfw.SetCharModsCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CharModsFunc)"/> that receives these
            events.</para>
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetCharModsCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CharModsFunc)">
            <summary>
            <para>This function sets the character with modifiers callback of the specified window,
            which is called when a Unicode character is input regardless of what modifier keys are
            used.</para>
            <para>The character with modifiers callback is intended for implementing custom Unicode
            character input. For regular Unicode text input, use
            <see cref="M:Glfw3.Glfw.SetCharCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CharFunc)"/>. Like the character callback, the
            character with modifiers callback deals with characters and is keyboard layout
            dependent. Characters do not map 1:1 to physical keys, as a key may produce zero, one or
            more characters.If you want to know whether a specific physical key was pressed or
            released, see <see cref="M:Glfw3.Glfw.SetKeyCallback(Glfw3.Glfw.Window,Glfw3.Glfw.KeyFunc)"/> instead.</para>
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetMouseButtonCallback(Glfw3.Glfw.Window,Glfw3.Glfw.MouseButtonFunc)">
            <summary>
            <para>This function sets the mouse button callback of the specified window, which is
            called when a mouse button is pressed or released.</para>
            <para>When a window loses input focus, it will generate synthetic mouse button release
            events for all pressed mouse buttons. You can tell these events from user-generated
            events by the fact that the synthetic ones are generated after the focus loss event has
            been processed, i.e. after <see cref="M:Glfw3.Glfw.SetWindowFocusCallback(Glfw3.Glfw.Window,Glfw3.Glfw.WindowFocusFunc)"/>
            has been called.</para>
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetCursorPosCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CursorPosFunc)">
            <summary>
            This function sets the cursor position callback of the specified window, which is called
            when the cursor is moved.The callback is provided with the position, in screen
            coordinates, relative to the upper-left corner of the client area of the window.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetCursorEnterCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CursorEnterFunc)">
            <summary>
            This function sets the cursor boundary crossing callback of the specified window, which
            is called when the cursor enters or leaves the client area of the window.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetScrollCallback(Glfw3.Glfw.Window,Glfw3.Glfw.CursorPosFunc)">
            <summary>
            <para>This function sets the scroll callback of the specified window, which is called
            when a scrolling device is used, such as a mouse wheel or scrolling area of a
            touchpad.</para>
            <para>The scroll callback receives all scrolling input, like that from a mouse wheel or
            a touchpad scrolling area.</para>
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetDropCallback(Glfw3.Glfw.Window,Glfw3.Glfw.DropFunc)">
            <summary>
            This function sets the file drop callback of the specified window, which is called when
            one or more dragged files are dropped on the window.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.JoystickPresent(Glfw3.Glfw.Joystick)">
            <summary>
            This function returns whether the specified joystick is present.
            </summary>
            <param name="joy">The joystick to query.</param>
            <returns><c>true</c> if the joystick is present, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Glfw3.Glfw.GetJoystickAxes(Glfw3.Glfw.Joystick)">
            <summary>
            <para>This function returns the values of all axes of the specified joystick. Each
            element in the array is a value between -1.0 and 1.0.</para>
            <para>Querying a joystick slot with no device present is not an error, but will cause
            this function to return <c>null</c>. Call <see cref="M:Glfw3.Glfw.JoystickPresent(Glfw3.Glfw.Joystick)"/> to
            check device presence.</para>
            </summary>
            <param name="joy">The joystick to query.</param>
            <returns>An array of axis values, or <c>null</c> if the joystick is not
            present.</returns>
        </member>
        <member name="M:Glfw3.Glfw.GetJoystickButtons(Glfw3.Glfw.Joystick)">
            <summary>
            <para>This function returns the state of all buttons of the specified joystick.</para>
            <para>Querying a joystick slot with no device present is not an error, but will cause
            this function to return <c>null</c>. Call <see cref="M:Glfw3.Glfw.JoystickPresent(Glfw3.Glfw.Joystick)"/> to
            check device presence.</para>
            </summary>
            <param name="joy">The joystick to query.</param>
            <returns>An array of button states, or <c>null</c> if the joystick is not
            present.</returns>
        </member>
        <member name="M:Glfw3.Glfw.GetJoystickName(Glfw3.Glfw.Joystick)">
            <summary>
            <para>This function returns the name, encoded as UTF-8, of the specified
            joystick.</para>
            <para>Querying a joystick slot with no device present is not an error, but will cause
            this function to return <c>null</c>. Call <see cref="M:Glfw3.Glfw.JoystickPresent(Glfw3.Glfw.Joystick)"/> to
            check device presence.</para>
            </summary>
            <param name="joy">The joystick to query.</param>
            <returns>The UTF-8 encoded name of the joystick, or <c>null</c> if the joystick is not
            present.</returns>
        </member>
        <member name="M:Glfw3.Glfw.SetJoystickCallback(Glfw3.Glfw.JoystickFunc)">
            <summary>
            This function sets the joystick configuration callback, or removes the currently set
            callback. This is called when a joystick is connected to or disconnected from the
            system.
            </summary>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set
            callback.</param>
        </member>
        <member name="M:Glfw3.Glfw.SetClipboardString(Glfw3.Glfw.Window,System.String)">
            <summary>
            This function sets the system clipboard to the specified, UTF-8 encoded string.
            </summary>
            <param name="window">The window that will own the clipboard contents.</param>
            <param name="value">A UTF-8 encoded string.</param>
            <seealso cref="M:Glfw3.Glfw.GetClipboardString(Glfw3.Glfw.Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.GetClipboardString(Glfw3.Glfw.Window)">
            <summary>
             This function returns the contents of the system clipboard, if it contains or is
             convertible to a UTF-8 encoded string. If the clipboard is empty or if its contents
             cannot be converted, <c>null</c> is returned and a
             <see cref="F:Glfw3.Glfw.ErrorCode.FormatUnavailable"/> error is generated.
            </summary>
            <param name="window">The window that will request the clipboard contents.</param>
            <returns>The contents of the clipboard as a UTF-8 encoded string, or <c>null</c> if an
            error occurred.</returns>
            <seealso cref="M:Glfw3.Glfw.SetClipboardString(Glfw3.Glfw.Window,System.String)"/>
        </member>
        <member name="M:Glfw3.Glfw.GetTime">
            <summary>
            <para>This function returns the value of the GLFW timer. Unless the timer has been set
            using <see cref="M:Glfw3.Glfw.SetTime(System.Double)"/>, the timer measures time elapsed since GLFW was
            initialized.</para>
            <para>The resolution of the timer is system dependent, but is usually on the order of a
            few micro- or nanoseconds. It uses the highest-resolution monotonic time source on each
            supported platform.</para>
            </summary>
            <returns>The current value, in seconds, or zero if an error occurred.</returns>
        </member>
        <member name="M:Glfw3.Glfw.SetTime(System.Double)">
            <summary>
            This function sets the value of the GLFW timer. It then continues to count up from that
            value. The value must be a positive finite number less than or equal to 18446744073.0
            which is approximately 584.5 years.
            </summary>
            <param name="time">The new value, in seconds.</param>
            <remarks>
            The upper limit of the timer is calculated as <c>floor((2^64 - 1) / 10^9)</c> and is due
            to implementations storing nanoseconds in 64 bits. The limit may be increased in the
            future.
            </remarks>
        </member>
        <member name="M:Glfw3.Glfw.GetTimerValue">
            <summary>
            This function returns the current value of the raw timer, measured in <c>1/frequency</c>
            seconds. To get the frequency, call <see cref="M:Glfw3.Glfw.GetTimerFrequency"/>.
            </summary>
            <returns>The value of the timer, or zero if an error occurred.</returns>
            <seealso cref="M:Glfw3.Glfw.GetTimerFrequency"/>
        </member>
        <member name="M:Glfw3.Glfw.GetTimerFrequency">
            <summary>
            This function returns the frequency, in Hz, of the raw timer.
            </summary>
            <returns>The frequency of the timer, in Hz, or zero if an error occurred</returns>
            <seealso cref="M:Glfw3.Glfw.GetTimerValue"/>
        </member>
        <member name="M:Glfw3.Glfw.MakeContextCurrent(Glfw3.Glfw.Window)">
            <summary>
            <para>This function makes the OpenGL or OpenGL ES context of the specified window
            current on the calling thread. A context can only be made current on a single thread at
            a time and each thread can have only a single current context at a time.</para>
            <para>By default, making a context non-current implicitly forces a pipeline flush. On
            machines that support <c>GL_KHR_context_flush_control</c>, you can control whether a
            context performs this flush by setting the <see cref="F:Glfw3.Glfw.Hint.ContextReleaseBehavior"/>
            window hint.</para>
            <para>The specified window must have an OpenGL or OpenGL ES context. Specifying a window
            without a context will generate a <see cref="F:Glfw3.Glfw.ErrorCode.NoWindowContext"/> error.</para>
            </summary>
            <param name="window">The window whose context to make current, or
            <see cref="F:Glfw3.Glfw.Window.None"/> to detach the current context.</param>
            <seealso cref="M:Glfw3.Glfw.GetCurrentContext"/>
        </member>
        <member name="M:Glfw3.Glfw.GetCurrentContext">
            <summary>
            This function returns the window whose OpenGL or OpenGL ES context is current on the
            calling thread.
            </summary>
            <returns>The window whose context is current, or <see cref="F:Glfw3.Glfw.Window.None"/> if no
            window's context is current.</returns>
            <seealso cref="M:Glfw3.Glfw.MakeContextCurrent(Glfw3.Glfw.Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.SwapBuffers(Glfw3.Glfw.Window)">
            <summary>
            <para>This function swaps the front and back buffers of the specified window when
            rendering with OpenGL or OpenGL ES. If the swap interval is greater than zero, the GPU
            driver waits the specified number of screen updates before swapping the buffers.</para>
            <para>The specified window must have an OpenGL or OpenGL ES context. Specifying a window
            without a context will generate a <see cref="F:Glfw3.Glfw.ErrorCode.NoWindowContext"/> error.</para>
            </summary>
            <param name="window">The window whose buffers to swap.</param>
            <remarks>
            <strong>EGL:</strong> The context of the specified window must be current on the
            calling thread.
            </remarks>
        </member>
        <member name="M:Glfw3.Glfw.SwapInterval(System.Int32)">
            <summary>
            <para>This function sets the swap interval for the current OpenGL or OpenGL ES context,
            i.e. the number of screen updates to wait from the time
            <see cref="M:Glfw3.Glfw.SwapBuffers(Glfw3.Glfw.Window)"/> was called before swapping the buffers and returning.
            This is sometimes called <em>vertical synchronization</em>, <em>vertical retrace
            synchronization</em> or just <em>vsync</em>.</para>
            <para>Contexts that support either of the <c>WGL_EXT_swap_control_tear</c> and
            <c>GLX_EXT_swap_control_tear</c> extensions also accept negative swap intervals, which
            allow the driver to swap even if a frame arrives a little bit late.</para>
            <para>You can check for the presence of these extensions using
            <see cref="M:Glfw3.Glfw.ExtensionSupported(System.String)"/>. For more information about swap tearing, see
            the extension specifications.</para>
            <para>A context must be current on the calling thread. Calling this function without a
            current context will cause a <see cref="F:Glfw3.Glfw.ErrorCode.NoCurrentContext"/> error.</para>
            </summary>
            <param name="interval">The minimum number of screen updates to wait for until the
            buffers are swapped by <see cref="M:Glfw3.Glfw.SwapBuffers(Glfw3.Glfw.Window)"/>.</param>
            <remarks>
            <para>This function is not called during context creation, leaving the swap interval set
            to whatever is the default on that platform. This is done because some swap interval
            extensions used by GLFW do not allow the swap interval to be reset to zero once it has
            been set to a non-zero value.</para>
            <para>Some GPU drivers do not honor the requested swap interval, either because of a
            user setting that overrides the application's request or due to bugs in the
            driver.</para>
            </remarks>
            <seealso cref="M:Glfw3.Glfw.SwapBuffers(Glfw3.Glfw.Window)"/>
        </member>
        <member name="M:Glfw3.Glfw.ExtensionSupported(System.String)">
            <summary>
            <para>This function returns whether the specified API extension is supported by the
            current OpenGL or OpenGL ES context. It searches both for client API extension and
            context creation API extensions.</para>
            <para>A context must be current on the calling thread. Calling this function without a
            current context will cause a <see cref="F:Glfw3.Glfw.ErrorCode.NoCurrentContext"/> error.</para>
            <para>As this functions retrieves and searches one or more extension strings each call,
            it is recommended that you cache its results if it is going to be used frequently. The
            extension strings will not change during the lifetime of a context, so there is no
            danger in doing this.</para>
            </summary>
            <param name="extension">The ASCII encoded name of the extension.</param>
            <returns><c>true</c> if the extension is available, or <c>false</c> otherwise.</returns>
            <seealso cref="M:Glfw3.Glfw.GetProcAddress(System.String)"/>
        </member>
        <member name="M:Glfw3.Glfw.GetProcAddress(System.String)">
            <summary>
            <para>This function returns the address of the specified OpenGL or OpenGL ES core or
            extension function, if it is supported by the current context.</para>
            <para>A context must be current on the calling thread. Calling this function without a
            current context will cause a <see cref="F:Glfw3.Glfw.ErrorCode.NoCurrentContext"/> error.</para>
            </summary>
            <param name="procname">The ASCII encoded name of the function.</param>
            <returns>The address of the function, or <c>null</c> if an error occurred.</returns>
            <remarks>
            <para>The address of a given function is not guaranteed to be the same between
            contexts.</para>
            <para>This function may return a non-<c>null</c> address despite the associated version
            or extension not being available. Always check the context version or extension string
            first.</para>
            </remarks>
            <seealso cref="M:Glfw3.Glfw.ExtensionSupported(System.String)"/>
        </member>
        <member name="M:Glfw3.Glfw.VulkanSupported">
            <summary>
            This function returns whether the Vulkan loader has been found. This check is performed
            by <see cref="M:Glfw3.Glfw.Init"/>.
            </summary>
            <returns><c>true</c> if Vulkan is available, or <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Glfw3.Glfw.Cursor">
            <summary>
            Opaque cursor object.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Cursor.None">
            <summary>
            <para>Null cursor pointer.</para>
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Cursor.Ptr">
            <summary>
            Pointer to an internal GLFWcursor.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.GammaRamp">
            <summary>
            This describes the gamma ramp for a monitor.
            </summary>
            <seealso cref="M:Glfw3.Glfw.GetGammaRamp(Glfw3.Glfw.Monitor)"/>
            <seealso cref="M:Glfw3.Glfw.SetGammaRamp(Glfw3.Glfw.Monitor,Glfw3.Glfw.GammaRamp)"/>
        </member>
        <member name="F:Glfw3.Glfw.GammaRamp.Red">
            <summary>
            An array of value describing the response of the red channel.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.GammaRamp.Green">
            <summary>
            An array of value describing the response of the green channel.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.GammaRamp.Blue">
            <summary>
            An array of value describing the response of the blue channel.
            </summary>
        </member>
        <member name="P:Glfw3.Glfw.GammaRamp.Size">
            <summary>
            The number of elements in each array.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.InternalGammaRamp.Red">
            <summary>
            An array of value describing the response of the red channel.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.InternalGammaRamp.Green">
            <summary>
            An array of value describing the response of the green channel.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.InternalGammaRamp.Blue">
            <summary>
            An array of value describing the response of the blue channel.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.InternalGammaRamp.Size">
            <summary>
            The number of elements in each array.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.Image">
            <summary>
            Image data.
            </summary>
            <seealso cref="!:"/>
        </member>
        <member name="F:Glfw3.Glfw.Image.Width">
            <summary>
            The width, in pixels, of this image.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Image.Height">
            <summary>
            The height, in pixels, of this image.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Image.Pixels">
            <summary>
            The pixel data of this image, arranged left-to-right, top-to-bottom.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.InternalImage">
            <summary>
            Internal image data.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.InternalImage.Width">
            <summary>
            The width, in pixels, of this image.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.InternalImage.Height">
            <summary>
            The height, in pixels, of this image.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.InternalImage.Pixels">
            <summary>
            The pixel data of this image, arranged left-to-right, top-to-bottom.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.Monitor">
            <summary>
            <para>Opaque monitor object.</para>
            </summary>
            <seealso cref="M:Glfw3.Glfw.GetMonitors"/>
            <seealso cref="M:Glfw3.Glfw.GetPrimaryMonitor"/>
        </member>
        <member name="F:Glfw3.Glfw.Monitor.None">
            <summary>
            <para>Null monitor pointer.</para>
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Monitor.Ptr">
            <summary>
            Pointer to an internal GLFWmonitor.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.VideoMode">
            <summary>
            This describes a single video mode.
            </summary>
            <seealso cref="M:Glfw3.Glfw.GetVideoMode(Glfw3.Glfw.Monitor)"/>
            <seealso cref="M:Glfw3.Glfw.GetVideoModes(Glfw3.Glfw.Monitor)"/>
        </member>
        <member name="F:Glfw3.Glfw.VideoMode.Width">
            <summary>
            The width, in screen coordinates, of the video mode.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.VideoMode.Height">
            <summary>
            The height, in screen coordinates, of the video mode.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.VideoMode.RedBits">
            <summary>
            The bit depth of the red channel of the video mode.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.VideoMode.GreenBits">
            <summary>
            The bit depth of the green channel of the video mode.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.VideoMode.BlueBits">
            <summary>
            The bit depth of the blue channel of the video mode.
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.VideoMode.RefreshRate">
            <summary>
            The refresh rate, in Hz, of the video mode.
            </summary>
        </member>
        <member name="T:Glfw3.Glfw.Window">
            <summary>
            <para>Opaque window object.</para>
            </summary>
            <seealso cref="!:CreateWindow(int, int, string, Monitor, Window)"/>
        </member>
        <member name="F:Glfw3.Glfw.Window.None">
            <summary>
            <para>Null window pointer.</para>
            </summary>
        </member>
        <member name="F:Glfw3.Glfw.Window.Ptr">
            <summary>
            Pointer to an internal GLFWwindow.
            </summary>
        </member>
    </members>
</doc>
